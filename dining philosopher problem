Dining-Philosophers problem
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS]; // Mutexes for forks

void* philosopher(void* num) {
int id = *(int*)num;

while (1) {
// Thinking
printf(&quot;Philosopher %d is thinking.\n&quot;, id);
sleep(rand() % 3); // Simulate thinking time

// Picking up forks
pthread_mutex_lock(&amp;forks[id]); // Pick up left fork
pthread_mutex_lock(&amp;forks[(id + 1) % NUM_PHILOSOPHERS]); // Pick up right fork

// Eating
printf(&quot;Philosopher %d is eating.\n&quot;, id);
sleep(rand() % 3); // Simulate eating time

// Putting down forks
pthread_mutex_unlock(&amp;forks[id]); // Put down left fork
pthread_mutex_unlock(&amp;forks[(id + 1) % NUM_PHILOSOPHERS]); // Put down right
fork
}
}

int main() {
pthread_t philosophers[NUM_PHILOSOPHERS];
int philosopher_ids[NUM_PHILOSOPHERS];

// Initialize mutexes for forks
for (int i = 0; i &lt; NUM_PHILOSOPHERS; i++) {
pthread_mutex_init(&amp;forks[i], NULL);
philosopher_ids[i] = i; // Assign philosopher IDs
}

// Create philosopher threads
for (int i = 0; i &lt; NUM_PHILOSOPHERS; i++) {
pthread_create(&amp;philosophers[i], NULL, philosopher, &amp;philosopher_ids[i]);
}

// Wait for philosopher threads to finish (they won&#39;t in this example)
for (int i = 0; i &lt; NUM_PHILOSOPHERS; i++) {
pthread_join(philosophers[i], NULL);

}

// Destroy mutexes
for (int i = 0; i &lt; NUM_PHILOSOPHERS; i++) {
pthread_mutex_destroy(&amp;forks[i]);
}

return 0;
}
