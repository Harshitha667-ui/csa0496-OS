1.First Fit Strategy

#include <stdio.h>
#define MAX_BLOCKS 100
#define MAX_PROCESSES 100
void firstFit(int blockSizes[], int m, int processSizes[], int n) {
    int allocation[MAX_PROCESSES];
        for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blockSizes[j] >= processSizes[i]) {
                allocation[i] = j;
                blockSizes[j] -= processSizes[i];
                break;
            }
        }
    }
    printf("Process No.\tProcess Size\tBlock No.\tBlock Size\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i+1, processSizes[i], allocation[i]+1, blockSizes[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i+1, processSizes[i]);
        }
    }
}

int main() {
    int m, n;
    printf("Enter number of blocks: ");
    scanf("%d", &m);
     int blockSizes[m];
    printf("Enter the sizes of the blocks: \n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blockSizes[i]);
    }
    printf("Enter number of processes: ");
    scanf("%d", &n);
    int processSizes[n];
    printf("Enter the sizes of the processes: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processSizes[i]);
    }
    firstFit(blockSizes, m, processSizes, n);
    return 0;
}
