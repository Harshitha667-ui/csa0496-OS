3.optimal paging

#include &lt;stdio.h&gt;
#define MAX_FRAMES 10
#define MAX_PAGES 50
// Function to find the optimal page to replace
int findOptimal(int pages[], int frames[], int num_pages, int num_frames, int
current_index) {
int pos = -1, farthest = current_index;
for (int i = 0; i &lt; num_frames; i++) {
int j;
for (j = current_index + 1; j &lt; num_pages; j++) {
if (frames[i] == pages[j]) {
if (j &gt; farthest) {
farthest = j;
pos = i;
}
break;
}
}
// If the page is never used again, return its position
if (j == num_pages)
return i;
}
// If all pages in frames are found in the future, return the farthest one
return (pos == -1) ? 0 : pos;
}
// Optimal Page Replacement Algorithm
void optimalPageReplacement(int pages[], int num_pages, int num_frames) {
int frames[MAX_FRAMES]; // Frame buffer
int page_faults = 0;
// Initialize frames with -1 (empty)
for (int i = 0; i &lt; num_frames; i++) {
frames[i] = -1;
}
printf(&quot;\nPage Reference | Frames\n&quot;);
printf(&quot;------------------------\n&quot;);
for (int i = 0; i &lt; num_pages; i++) {
printf(&quot;%12d | &quot;, pages[i]);

int found = 0;
// Check if the page is already in frames
for (int j = 0; j &lt; num_frames; j++) {
if (frames[j] == pages[i]) {
found = 1;
break;
}
}
// If the page is not found, replace the optimal page
if (!found) {
int pos = -1;
// Find an empty frame first
for (int j = 0; j &lt; num_frames; j++) {
if (frames[j] == -1) {
pos = j;
break;
}
}
// If no empty frame, find the optimal page to replace
if (pos == -1) {
pos = findOptimal(pages, frames, num_pages, num_frames, i);
}
frames[pos] = pages[i];
page_faults++;
}
// Print the current frame state
for (int j = 0; j &lt; num_frames; j++) {
if (frames[j] != -1)
printf(&quot;%d &quot;, frames[j]);
else
printf(&quot;- &quot;);
}
printf(&quot;\n&quot;);
}
printf(&quot;\nTotal Page Faults: %d\n&quot;, page_faults);
}
int main() {
int num_pages, num_frames;
int pages[MAX_PAGES];

// Input: Number of pages
printf(&quot;Enter number of pages: &quot;);
scanf(&quot;%d&quot;, &amp;num_pages);
// Input: Page reference string
printf(&quot;Enter the page reference string: &quot;);
for (int i = 0; i &lt; num_pages; i++) {
scanf(&quot;%d&quot;, &amp;pages[i]);
}
// Input: Number of frames
printf(&quot;Enter number of frames: &quot;);
scanf(&quot;%d&quot;, &amp;num_frames);
// Run Optimal page replacement
optimalPageReplacement(pages, num_pages, num_frames);
return 0;
}
