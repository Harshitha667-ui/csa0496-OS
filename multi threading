5.multithreading
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
// Function executed by each thread
void *printMessage(void *arg) {
int thread_num = *((int *)arg);
printf(&quot;Hello from thread %d!\n&quot;, thread_num);
sleep(1); // Simulating work
printf(&quot;Thread %d finished execution.\n&quot;, thread_num);
return NULL;
}
int main() {
pthread_t threads[3]; // Array to hold thread IDs
int thread_nums[3] = {1, 2, 3}; // Thread numbers
// Creating threads
for (int i = 0; i &lt; 3; i++) {
if (pthread_create(&amp;threads[i], NULL, printMessage, &amp;thread_nums[i]) != 0) {
perror(&quot;Failed to create thread&quot;);
return 1;
}
}
// Waiting for threads to finish
for (int i = 0; i &lt; 3; i++) {
pthread_join(threads[i], NULL);
}
printf(&quot;All threads completed execution.\n&quot;);
return 0;
}
