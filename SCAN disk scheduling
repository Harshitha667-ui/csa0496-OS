SCAN disk scheduling 
#include <stdio.h>
#include <stdlib.h>

// Function to implement the SCAN Disk Scheduling algorithm
void scanDiskScheduling(int disk[], int n, int initialHeadPosition, int diskSize, int direction) {
    int totalMovement = 0;
    int currentPosition = initialHeadPosition;
    
    // Sort the disk request positions
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (disk[i] > disk[j]) {
                int temp = disk[i];
                disk[i] = disk[j];
                disk[j] = temp;
            }
        }
    }

    // Print the header
    printf("Disk Scheduling using SCAN:\n");
    printf("Initial Head Position: %d\n", initialHeadPosition);
    printf("Disk Size: %d\n", diskSize);
    printf("Direction: %s\n", direction == 0 ? "Left to Right" : "Right to Left");
    
    // Movement calculation
    int left[n], right[n];
    int leftIndex = 0, rightIndex = 0;
    
    // Separate requests to the left and right of the initial head position
    for (int i = 0; i < n; i++) {
        if (disk[i] < currentPosition) {
            left[leftIndex++] = disk[i];
        } else {
            right[rightIndex++] = disk[i];
        }
    }
    
    // Move the disk arm in the initial direction (left to right or right to left)
    if (direction == 0) {  // Left to Right
        // First, process the requests to the right of the initial head position
        for (int i = 0; i < rightIndex; i++) {
            totalMovement += abs(currentPosition - right[i]);
            currentPosition = right[i];
        }
        
        // Then move to the rightmost end and process requests to the left
        totalMovement += abs(currentPosition - (diskSize - 1));
        currentPosition = diskSize - 1;
        
        for (int i = leftIndex - 1; i >= 0; i--) {
            totalMovement += abs(currentPosition - left[i]);
            currentPosition = left[i];
        }
    } else {  // Right to Left
        // First, process the requests to the left of the initial head position
        for (int i = leftIndex - 1; i >= 0; i--) {
            totalMovement += abs(currentPosition - left[i]);
            currentPosition = left[i];
        }

        // Then move to the leftmost end and process requests to the right
        totalMovement += abs(currentPosition - 0);
        currentPosition = 0;

        for (int i = 0; i < rightIndex; i++) {
            totalMovement += abs(currentPosition - right[i]);
            currentPosition = right[i];
        }
    }

    // Print the total head movement
    printf("\nTotal Head Movement: %d\n", totalMovement);
}

int main() {
    int n, diskSize, initialHeadPosition, direction;

    // Input number of requests
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    int disk[n];

    // Input the disk request positions
    printf("Enter the disk request positions: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &disk[i]);
    }

    // Input the disk size (maximum disk position)
    printf("Enter the disk size: ");
    scanf("%d", &diskSize);

    // Input initial head position
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &initialHeadPosition);

    // Input direction of movement (0 = left to right, 1 = right to left)
    printf("Enter the direction (0 = left to right, 1 = right to left): ");
    scanf("%d", &direction);

    // Call the SCAN disk scheduling function
    scanDiskScheduling(disk, n, initialHeadPosition, diskSize, direction);

    return 0;
}
