4.Sequential file searching
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#define MAX_FILES 10
#define MAX_BLOCKS 100
// Structure to represent a file
typedef struct {
char name[20];
int start;

int length;
} File;
File files[MAX_FILES]; // Array to store files
int disk[MAX_BLOCKS] = {0}; // Disk blocks (1 = occupied, 0 = free)
int file_count = 0; // Track the number of files
// Function to allocate a file
void allocateFile() {
if (file_count &gt;= MAX_FILES) {
printf(&quot;Error: Maximum file limit reached!\n&quot;);
return;
}
char filename[20];
int start, length;
printf(&quot;\nEnter file name: &quot;);
scanf(&quot;%s&quot;, filename);
printf(&quot;Enter start block: &quot;);
scanf(&quot;%d&quot;, &amp;start);
printf(&quot;Enter file size (number of blocks): &quot;);
scanf(&quot;%d&quot;, &amp;length);
// Check if blocks are available
for (int i = start; i &lt; start + length; i++) {
if (i &gt;= MAX_BLOCKS || disk[i] == 1) {
printf(&quot;Error: Blocks not available or out of range!\n&quot;);
return;
}
}
// Allocate the blocks
for (int i = start; i &lt; start + length; i++) {
disk[i] = 1;
}
// Store file information
strcpy(files[file_count].name, filename);
files[file_count].start = start;
files[file_count].length = length;
file_count++;
printf(&quot;File &#39;%s&#39; allocated from block %d to %d.\n&quot;, filename, start, start + length - 1);
}
// Function to display allocated files

void displayFiles() {
if (file_count == 0) {
printf(&quot;\nNo files allocated.\n&quot;);
return;
}
printf(&quot;\nFile Allocation Table:\n&quot;);
printf(&quot;-----------------------------------------\n&quot;);
printf(&quot;File Name Start Block Length Blocks\n&quot;);
printf(&quot;-----------------------------------------\n&quot;);
for (int i = 0; i &lt; file_count; i++) {
printf(&quot;%-10s %-12d %-6d &quot;, files[i].name, files[i].start, files[i].length);
for (int j = files[i].start; j &lt; files[i].start + files[i].length; j++) {
printf(&quot;%d &quot;, j);
}
printf(&quot;\n&quot;);
}
}
// Function to delete a file
void deleteFile() {
char filename[20];
printf(&quot;\nEnter file name to delete: &quot;);
scanf(&quot;%s&quot;, filename);
int found = -1;
for (int i = 0; i &lt; file_count; i++) {
if (strcmp(files[i].name, filename) == 0) {
found = i;
break;
}
}
if (found == -1) {
printf(&quot;Error: File not found!\n&quot;);
return;
}
// Free the allocated blocks
for (int i = files[found].start; i &lt; files[found].start + files[found].length; i++) {
disk[i] = 0;
}
printf(&quot;File &#39;%s&#39; deleted.\n&quot;, filename);
// Shift the file entries

for (int i = found; i &lt; file_count - 1; i++) {
files[i] = files[i + 1];
}
file_count--;
}
// Main function to interact with the user
int main() {
int choice;
while (1) {
printf(&quot;\nSequential File Allocation System&quot;);
printf(&quot;\n1. Allocate File&quot;);
printf(&quot;\n2. Display Files&quot;);
printf(&quot;\n3. Delete File&quot;);
printf(&quot;\n4. Exit&quot;);
printf(&quot;\nEnter your choice: &quot;);
scanf(&quot;%d&quot;, &amp;choice);
switch (choice) {
case 1:
allocateFile();
break;
case 2:
displayFiles();
break;
case 3:
deleteFile();
break;
case 4:
exit(0);
default:
printf(&quot;Invalid choice! Try again.\n&quot;);
}
}
return 0;
}
